name: Demo 3 - Deploy Container App

on:
  workflow_dispatch:

env:
  CONTAINER_APP_NAME: 'ca-mms-demo3'
  CONTAINER_REGISTRY_NAME: 'acrmmsdemo3'
  IMAGE_NAME: 'demo3-powershell-api'
  TERRAFORM_VERSION: '1.5.0'

jobs:
  terraform:
    name: 'Deploy Infrastructure with Terraform'
    runs-on: ubuntu-latest
    environment: development
    outputs:
      container_registry_login_server: ${{ steps.terraform_output.outputs.container_registry_login_server }}
      
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/demo3

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -input=false

    - name: Get Terraform Outputs
      if: github.ref == 'refs/heads/main'
      id: terraform_output
      run: |
        echo "container_registry_login_server=$(terraform output -raw container_registry_login_server)" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: 'Build and Deploy Container'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main'
    environment: development

    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Build and Push to ACR'
      run: |
        # Login to ACR
        az acr login --name ${{ env.CONTAINER_REGISTRY_NAME }}
        
        # Build and push the image
        cd containers/demo3-simple
        
        # Build the image
        docker build -t ${{ env.CONTAINER_REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest .
        
        # Push the image
        docker push ${{ env.CONTAINER_REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
        
        echo "Container image built and pushed successfully!"

    - name: 'Deploy to Container App'
      run: |
        # Configure container app to use managed identity for ACR authentication
        az containerapp registry set \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group rg-mms-demo3 \
          --server ${{ env.CONTAINER_REGISTRY_NAME }}.azurecr.io \
          --identity system
        
        # Update the container app with the new image
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group rg-mms-demo3 \
          --image ${{ env.CONTAINER_REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
        
        echo "Container App updated successfully!"

    - name: 'Get Container App URL and Test'
      run: |
        # Get the Container App URL
        CONTAINER_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group rg-mms-demo3 \
          --query properties.configuration.ingress.fqdn \
          --output tsv)
        
        echo "Container App URL: https://$CONTAINER_URL"
        
        # Wait for deployment to complete
        echo "Waiting for container app to be ready..."
        sleep 60
        
        # Test the endpoints
        echo "Testing container app endpoints..."
        
        # Test root endpoint
        echo "Test 1: Root endpoint"
        curl -f "https://$CONTAINER_URL/" || echo "Test 1 failed"
        
        # Test health endpoint
        echo "Test 2: Health endpoint"
        curl -f "https://$CONTAINER_URL/health" || echo "Test 2 failed"
        
        # Test echo endpoint
        echo "Test 3: Echo endpoint"
        curl -f "https://$CONTAINER_URL/echo?message=Hello%20from%20Container%20Apps!" || echo "Test 3 failed"
        
        # Test info endpoint
        echo "Test 4: Info endpoint"
        curl -f "https://$CONTAINER_URL/info" || echo "Test 4 failed"
        
        # Test time endpoint
        echo "Test 5: Time endpoint"
        curl -f "https://$CONTAINER_URL/time" || echo "Test 5 failed"
        
        echo "Demo 3 container app deployment and testing completed!"
        echo "Access your app at: https://$CONTAINER_URL"